By: Sam Haddad 
Date: March-3rd-2023

This is a 2-part assignment. In the first part, you are asked a series of questions that 
will help you profile and understand the data just like a data scientist would. For this 
first part of the assignment, you will be assessed both on the correctness of your 
findings, as well as the code you used to arrive at your answer. You will be graded on 
how easy your code is to read, so remember to use proper formatting and comments where 
necessary.

In the second part of the assignment, you are asked to come up with your own inferences 
and analysis of the data for a particular research question you want to answer. You will be 
required to prepare the dataset for the analysis you choose to do. As with the first part, 
you will be graded, in part, on how easy your code is to read, so use proper formatting 
and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions 
you are being asked, and your job will be to transfer your answers and SQL coding where
indicated into this worksheet so that your peers can review your work. You should be able 
to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) 
to copy and paste your answers. If you are going to use Word or some other page layout
application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact
for you reviewer.

Part 1: Yelp Dataset Profiling and Understanding
1. Profile the data by finding the total number of records for each of the tables below:
	-Code Format: SELECT COUNT(*) FROM table
				SELECT COUNT(*) FROM Attribute
				SELECT COUNT(*) FROM Business 
				SELECT COUNT(*) FROM Category 
				SELECT COUNT(*) FROM Checkin
				SELECT COUNT(*) FROM elite_years
				SELECT COUNT(*) FROM friend
				SELECT COUNT(*) FROM hours
				SELECT COUNT(*) FROM photo
				SELECT COUNT(*) FROM review
				SELECT COUNT(*) FROM tip
				SELECT COUNT(*) FROM user

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000 
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
	-Code Format: SELECT COUNT(DISTINCT (KEY)) FROM table
				SELECT COUNT(DISTINCT id) FROM business 
				SELECT COUNT(DISTINCT business_id) FROM Hours
				SELECT COUNT(DISTINCT business_id) FROM Category
				SELECT COUNT(DISTINCT business_id) FROM Attribute
				SELECT COUNT(DISTINCT id), COUNT(DISTINCT business_id), COUNT(DISTINCT user_id) FROM Review
				SELECT COUNT(DISTINCT business_id)) FROM Checkin
				SELECT COUNT(DISTINCT id), COUNT(DISTINCT business_id) FROM Photo
				SELECT COUNT(DISTINCT business_id), COUNT(DISTINCT user_id) FROM Tip
				SELECT COUNT(DISTINCT id) FROM User 
				SELECT COUNT(DISTINCT user_id) FROM Friend 
				SELECT COUNT(DISTINCT user_id) FROM Elite_years 


i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = id: 10000, business_id: 8090, user_id:9581
vi. Checkin = 493 
vii. Photo = id: 10000, business_id: 6493
viii. Tip = business_id: 3979, user_id: 537 
ix. User = 10000 
x. Friend = 11 
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: 	NO
	
	
	SQL code used to arrive at answer:
	-Code Format: SELECT COUNT(*) FROM user WHERE column_name is NULL
				SELECT COUNT(*) FROM user WHERE id is NULL
				SELECT COUNT(*) FROM user WHERE name is NULL
				SELECT COUNT(*) FROM user WHERE review_count is NULL
				SELECT COUNT(*) FROM user WHERE yelping_since is NULL
				SELECT COUNT(*) FROM user WHERE useful is NULL
				SELECT COUNT(*) FROM user WHERE funny is NULL
				SELECT COUNT(*) FROM user WHERE cool is NULL
				SELECT COUNT(*) FROM user WHERE fans is NULL
				SELECT COUNT(*) FROM user WHERE average_stars is NULL
				SELECT COUNT(*) FROM user WHERE complement_hot is NULL
				SELECT COUNT(*) FROM user WHERE complement_more is NULL
				SELECT COUNT(*) FROM user WHERE complement_profile is NULL
				SELECT COUNT(*) FROM user WHERE complement_cute is NULL
				SELECT COUNT(*) FROM user WHERE complement_list is NULL
				SELECT COUNT(*) FROM user WHERE complement_note is NULL
				SELECT COUNT(*) FROM user WHERE complement_plain is NULL
				SELECT COUNT(*) FROM user WHERE complement_cool is NULL
				SELECT COUNT(*) FROM user WHERE complement_funny is NULL
				SELECT COUNT(*) FROM user WHERE ccomplement_writer is NULL
				SELECT COUNT(*) FROM user WHERE complement_photos is NULL
        
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
		select min(stars), max(stars), avg(stars) 
		from review

		min:1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
		select min(stars), max(stars), avg(stars)
		from business 

		min:	1	max:5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
		select min(likes), max(likes), avg(likes)
		from tip 

		min:	0	max:2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
		select min(count), max(count), avg(count)
		from checkin

		min: 1	max: 53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
		select min(Review_count), max(Review_count), avg(Review_count)
		from User

		min: 0	max: 2000	 avg: 24.2995
    
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
		select min(stars), max(stars), avg(stars) 
		from review

		min:1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
		select min(stars), max(stars), avg(stars)
		from business 

		min:	1	max:5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
		select min(likes), max(likes), avg(likes)
		from tip 

		min:	0	max:2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
		select min(count), max(count), avg(count)
		from checkin

		min: 1	max: 53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
		select min(Review_count), max(Review_count), avg(Review_count)
		from User

		min: 0	max: 2000	 avg: 24.2995
		

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	select city, sum(review_count) as reviews
	from business 
	group by city
	order by reviews desc

	Copy and Paste the Result Below:
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars, sum(review_count)
from business
where city = 'Avon'
group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------------------+
| stars | sum(review_count) |
+-------+-------------------+
|   1.5 |                10 |
|   2.5 |                 6 |
|   3.5 |                88 |
|   4.0 |                21 |
|   4.5 |                31 |
|   5.0 |                 3 |
+-------+-------------------+

ii. Beachwood

SQL code used to arrive at answer:
select stars, sum(review_count)
from business
where city = 'Beachwood'
group by stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------------------+
| stars | sum(review_count) |
+-------+-------------------+
|   2.0 |                 8 |
|   2.5 |                 3 |
|   3.0 |                11 |
|   3.5 |                 6 |
|   4.0 |                69 |
|   4.5 |                17 |
|   5.0 |                23 |
+-------+-------------------+		

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select id, name, review_count
	from user
	order by review_count desc
	limit 3
		
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results: 
	No, posing more reviews does not correlate with more fans 
	
	select review_count, fans 
	from user
	order by fans desc


+--------------+------+
| review_count | fans |
+--------------+------+
|          609 |  503 |
|          968 |  497 |
|         1153 |  311 |
|         2000 |  253 |
|          930 |  173 |
|          813 |  159 |
|          377 |  133 |
|         1215 |  126 |
|          862 |  124 |
|          834 |  120 |
|          861 |  115 |
|          408 |  111 |
|          255 |  105 |
|         1039 |  104 |
|          694 |  101 |
|         1246 |  101 |
|          307 |   96 |
|          584 |   89 |
|          842 |   85 |
|          220 |   84 |
|          408 |   81 |
|          178 |   80 |
|          754 |   78 |
|         1339 |   76 |
|          161 |   73 |
+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word “love” then the word “hate”

	
	SQL code used to arrive at answer:
	select count(*) as hatecount 
	from review 
	where text like "%hate%"

+-----------+
| hatecount |
+-----------+
|       232 |
+-----------+
	
	select count(*) as lovecount
	from review
	where text like "%love%"

+-----------+
| lovecount |
+-----------+
|      1780 |
+-----------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select id, name, fans
	from user
	order by fans desc
	limit 10

	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
+------------------+-------------+---------+---------+----------------------+-----------+---------+
| name             | category    | city    | zipcode | hours                | rating    | reviews |
+------------------+-------------+---------+---------+----------------------+-----------+---------+
| Cabin Fever      | Restaurants | Toronto | M6P 1A6 | Saturday|16:00-2:00  | 4-5 stars |      26 |
| Sushi Osaka      | Restaurants | Toronto | M9A 1C2 | Saturday|11:00-23:00 | 4-5 stars |       8 |
| Edulis           | Restaurants | Toronto | M5V     | Saturday|18:00-23:00 | 4-5 stars |      89 |
| Big Smoke Burger | Restaurants | Toronto | M4B 2L9 | Saturday|10:30-21:00 | 2-3 stars |      47 |
| Pizzaiolo        | Restaurants | Toronto | M5H 1X6 | Saturday|10:00-4:00  | 2-3 stars |      34 |
| 99 Cent Sushi    | Restaurants | Toronto | M5B 2E5 | Saturday|11:00-23:00 | 2-3 stars |       5 |
	
i. Do the two groups you chose to analyze have a different distribution of hours? Yes the two groups have different distribution of hours. For example, Edulis, a 4-5 stars rating, runs shorter than 99 Cent Sushi, which is a 2-3 stars rating. 


ii. Do the two groups you chose to analyze have a different number of reviews? Yes they have different number of reviews
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain. No, I wasn’t able to infer anything from the location data provided since they all have different zipcodes.  

SQL code used for analysis:
SELECT B.name , C.category, B.city, B.postal_code as zipcode, hours, 
CASE
    WHEN stars BETWEEN 2 AND 3 THEN '2-3 stars'
    WHEN stars BETWEEN 4 AND 5 THEN '4-5 stars'
    END AS rating, B.review_count as reviews
From business B
Inner join hours H  on B.id = H.business_id
Inner join category C on C.business_id = B.id
Where city = ’Toronto’ and category = 'Restaurants' and rating in ('2-3 stars','4-5 stars')
Group By name
Order By stars desc
		
2. Group business based on the ones that are open and the ones that are closed. 
What differences can you find between the ones that are still open and the ones that are closed? 
List at least two differences and the SQL code you used to arrive at your answer.
+--------------------+----------------------+---------------+-------------------+---------+
| count(distinct id) | count(distinct city) |    avg(stars) | avg(review_count) | is_open |
+--------------------+----------------------+---------------+-------------------+---------+
|               1520 |                  144 | 3.52039473684 |     23.1980263158 |       0 |
|               8480 |                  351 | 3.67900943396 |     31.7570754717 |       1 |
+--------------------+----------------------+---------------+-------------------+---------+
		
i. Difference 1: The Avg review_count for the closed business is almost 9 points lower than the Avg review_count for the open business 
         
         
ii. Difference 2: The number of distinct id for the open business is 5.5 times higher than the number of distinct id for the closed 
business, hence why the avg review_count for the closed one is lower than the open one 
         
         
         
SQL code used for analysis:

select count(distinct id), count(distinct city), avg(stars), avg(review_count), is_open
From business 
group by is_open

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp 
dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or 
anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just 
a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: I would like to analyze and see which city and type of Cuisine had the most star ratings 
based on the number of restaurants, its star rating, amd reviews   
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data: For this type of analysis, I will collect data 
such as the number of restaurants in each state with different cuisines, and the average star ratings and reviews for each of the restaurants. After all data is organized, the indicators 
will give me an insight about which city and type of cuisine had the most star ratings.         
                           
                  
iii. Output of your finished dataset:
+-----------------+----------+---------------------+-------------------+------------+
| city            | category | How_many_Resturants | AVG(review_count) | AVG(stars) |
+-----------------+----------+---------------------+-------------------+------------+
| Las Vegas       | Japanese |                   2 |               5.5 |        4.5 |
| Toronto         | Korean   |                   1 |               8.0 |        4.5 |
| Las Vegas       | Chinese  |                   1 |             768.0 |        4.0 |
| Las Vegas       | French   |                   2 |             128.5 |        4.0 |
| Brampton        | Indian   |                   1 |              10.0 |        4.0 |
| Mesa            | Italian  |                   1 |             129.0 |        4.0 |
| Toronto         | Japanese |                   2 |              68.0 |        4.0 |
| Cuyahoga Falls  | Korean   |                   1 |              55.0 |        4.0 |
| Tolleson        | Mexican  |                   4 |             34.25 |        4.0 |
| Edinburgh       | Chinese  |                   2 |              12.0 |        3.5 |
| Edinburgh       | Indian   |                   4 |             13.25 |        3.5 |
| Litchfield Park | Mexican  |                   1 |              83.0 |        3.5 |
| Montréal        | Italian  |                   1 |              19.0 |        3.0 |
| Pittsburgh      | Mexican  |                   1 |             103.0 |        3.0 |
| Toronto         | Japanese |                   1 |               5.0 |        2.0 |
| Champaign       | Mexican  |                   1 |               4.0 |        2.0 |
| Toronto         | Chinese  |                   1 |               4.0 |        1.5 |
+-----------------+----------+---------------------+-------------------+------------+         
iv. Provide the SQL code you used to create your final dataset:
SELECT b.city, c.category,COUNT(b.name) AS
How_many_Resturants,AVG(review_count),AVG(stars)
FROM business b 
INNER JOIN category c  ON c.business_id = b.id
WHERE c.category IN
("Chinese","Mexican","French","Italian","Korean","Japanese","Indian")
GROUP BY b.stars, c.category
ORDER BY b.stars desc 


		


				
	

